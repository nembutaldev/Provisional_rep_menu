{"ast":null,"code":"var _jsxFileName = \"/Users/Buffalo/Desktop/menu/popdavise-v2/src/pages/auth/menu-editar/forms/edit-section.jsx\";\nimport React from 'react';\nimport Modal from '../../../../components/modales/modal';\nimport { Form, FieldInput, Label } from '../../../../components/inputs/item-forms';\nimport { Input } from '../../../../components/inputs/inputs';\nimport { ButtonAction } from '../../../../components/buttons/button-action';\nimport { connect } from 'react-redux';\nimport SpinerForm from '../../../../components/spiners/spiner-form';\nimport { PutMethod } from '../../../../utils/peticiones';\nimport { ErrorAlert, SuccesAlert, InfoAlert } from '../../../../utils/alertas';\n\nconst EditSection = props => {\n  //console.log('EDITAR', props)\n  const {\n    menu\n  } = props.match.params;\n  const token = props.sesion.token;\n  const [modal, setModal] = React.useState(false);\n  const [cargando, setCargando] = React.useState(true);\n  const [name, setName] = React.useState('');\n  const [load, setLoad] = React.useState(false);\n  React.useEffect(() => {\n    setTimeout(() => {\n      setModal(true);\n    }, 100);\n\n    if (props.sections.length !== 0) {\n      const secciones = props.sections;\n      const mapSecciones = secciones.map(seccion => seccion.id_section);\n      const seleccionada = parseInt(props.match.params.section);\n      const indexSeleccionado = mapSecciones.indexOf(seleccionada);\n      const elemento = secciones[indexSeleccionado];\n      setName(elemento.name);\n      setCargando(false);\n    }\n  }, [props]);\n\n  const openClose = () => {\n    setModal(!modal);\n    props.history.push(`/dashboard/menu/${menu}`);\n  };\n\n  const closeModal = () => {\n    setModal(false);\n    props.history.push(`/dashboard/menu/${menu}`);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoad(true);\n    const secciones = props.sections;\n    const mapSecciones = secciones.map(seccion => seccion.id_section);\n    const seleccionada = parseInt(props.match.params.section);\n    const index = mapSecciones.indexOf(seleccionada);\n    const item = secciones[index];\n\n    if (name === '') {\n      InfoAlert('El campo de nombre no puede estar vacio');\n      setLoad(false);\n      return;\n    }\n\n    const editSection = {\n      name: name,\n      id_section: item.id_section,\n      index: item.index\n    };\n    const result = await PutMethod(editSection, `api/users/section/${item.id_section}`, {\n      Authoritazion: 'Bearer ' + token\n    });\n\n    if (result.ok) {\n      secciones.splice(index, 1, result.response.data.data);\n      props.clearSections();\n      props.putSections(secciones);\n      setLoad(false);\n      SuccesAlert('SecciÃ³n actualizada');\n      props.history.push(`/dashboard/menu/${menu}`);\n    } else {\n      ErrorAlert('Algo salio mal');\n      setLoad(false);\n    }\n  };\n\n  if (cargando) {\n    return /*#__PURE__*/React.createElement(SpinerForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    toggle: modal,\n    toggleModal: openClose,\n    cerrarFunction: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FieldInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: 'var(--colordos)',\n      fontSize: '1.5rem',\n      fontFamily: 'Bold',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, \"Editar secci\\xF3n\")), /*#__PURE__*/React.createElement(FieldInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, \"Editar nombre de secci\\xF3n\"), /*#__PURE__*/React.createElement(Input, {\n    name: \"name\",\n    value: name,\n    onChange: e => {\n      setName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(FieldInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, load ? /*#__PURE__*/React.createElement(SpinerForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(ButtonAction, {\n    maxWidth: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, \"Editar\")))));\n}; //---------REDUX\n\n\nconst mapStateToProps = state => {\n  return {\n    sections: state.menuSection,\n    sesion: state.login\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    putSections: data => {\n      dispatch({\n        type: 'EDITAR_SECTION',\n        data: data\n      });\n    },\n    clearSections: () => {\n      dispatch({\n        type: 'CLEAN_SECTIONS'\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditSection);","map":{"version":3,"sources":["/Users/Buffalo/Desktop/menu/popdavise-v2/src/pages/auth/menu-editar/forms/edit-section.jsx"],"names":["React","Modal","Form","FieldInput","Label","Input","ButtonAction","connect","SpinerForm","PutMethod","ErrorAlert","SuccesAlert","InfoAlert","EditSection","props","menu","match","params","token","sesion","modal","setModal","useState","cargando","setCargando","name","setName","load","setLoad","useEffect","setTimeout","sections","length","secciones","mapSecciones","map","seccion","id_section","seleccionada","parseInt","section","indexSeleccionado","indexOf","elemento","openClose","history","push","closeModal","handleSubmit","e","preventDefault","index","item","editSection","result","Authoritazion","ok","splice","response","data","clearSections","putSections","color","fontSize","fontFamily","textAlign","target","value","mapStateToProps","state","menuSection","login","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Modal from '../../../../components/modales/modal';\nimport { Form, FieldInput, Label } from '../../../../components/inputs/item-forms';\nimport { Input } from '../../../../components/inputs/inputs';\nimport { ButtonAction } from '../../../../components/buttons/button-action';\nimport { connect } from 'react-redux'\nimport SpinerForm from '../../../../components/spiners/spiner-form';\nimport { PutMethod } from '../../../../utils/peticiones';\nimport { ErrorAlert, SuccesAlert, InfoAlert } from '../../../../utils/alertas';\n\n\nconst EditSection = (props) => {\n\n    //console.log('EDITAR', props)\n   \n    const {menu} = props.match.params\n    const token = props.sesion.token\n    const [modal, setModal] = React.useState(false)\n    const [cargando, setCargando] = React.useState(true)\n    const [name, setName] = React.useState('')\n    const [load, setLoad] = React.useState(false)\n\n    React.useEffect(()=>{  \n        setTimeout(() =>{ setModal(true) },100)\n        if(props.sections.length !== 0){\n            const secciones = props.sections\n            const mapSecciones = secciones.map((seccion) => seccion.id_section)\n            const seleccionada = parseInt(props.match.params.section)\n            const indexSeleccionado = mapSecciones.indexOf(seleccionada)\n            const elemento = secciones[indexSeleccionado]\n            setName(elemento.name)\n            setCargando(false)\n        }\n    },[props])\n\n    const openClose = () =>{\n        setModal(!modal)\n        props.history.push(`/dashboard/menu/${menu}`)\n    }\n    const closeModal = () =>{\n        setModal(false)\n        props.history.push(`/dashboard/menu/${menu}`)\n    }\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault();\n        setLoad(true)\n        const secciones = props.sections\n        const mapSecciones = secciones.map((seccion)=> seccion.id_section)\n        const seleccionada = parseInt(props.match.params.section)\n        const index = mapSecciones.indexOf(seleccionada)\n        const item = secciones[index]\n\n        if(name === ''){\n            InfoAlert('El campo de nombre no puede estar vacio')\n            setLoad(false)\n            return;\n        }\n\n        const editSection={\n             name: name,\n             id_section: item.id_section,\n             index: item.index\n        }\n        \n        const result = await PutMethod(editSection, `api/users/section/${item.id_section}`, {Authoritazion: 'Bearer ' + token})\n        if(result.ok){\n            secciones.splice(index, 1, result.response.data.data );\n            props.clearSections();\n            props.putSections(secciones);\n            setLoad(false)\n            SuccesAlert('SecciÃ³n actualizada')\n            props.history.push(`/dashboard/menu/${menu}`)\n        }else{\n            ErrorAlert('Algo salio mal')\n            setLoad(false)\n        }\n    }\n\n\n\n    \n    if(cargando){\n        return <SpinerForm/>\n    }\n\n    return (\n        <>  \n        <Modal toggle={modal} toggleModal={openClose} cerrarFunction={closeModal}>\n            <Form onSubmit={handleSubmit}>\n\n                <FieldInput>\n                    <h1 style={{    color:'var(--colordos)',\n                                    fontSize:'1.5rem',\n                                    fontFamily:'Bold',\n                                    textAlign:'center'\n                                    }}>Editar secciÃ³n</h1>\n          \n                </FieldInput>\n                <FieldInput>\n                    <Label>Editar nombre de secciÃ³n</Label>\n                    <Input name=\"name\" value={name} onChange={(e) =>{setName(e.target.value)}}/>\n                </FieldInput>\n                <FieldInput>\n                    {load ?\n                        <SpinerForm/>\n                        :\n                        <ButtonAction   maxWidth=\"100%\">Editar</ButtonAction>\n                    }\n                </FieldInput>\n\n            </Form> \n        </Modal>\n        </>\n    );\n};\n\n\n//---------REDUX\nconst mapStateToProps = (state) => {\n    return {\n        sections: state.menuSection,\n        sesion: state.login\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        putSections: (data) => {\n            dispatch({type:'EDITAR_SECTION', data:data})\n        },\n        clearSections: () => {\n            dispatch({type:'CLEAN_SECTIONS'})\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditSection)\n\n"]},"metadata":{},"sourceType":"module"}