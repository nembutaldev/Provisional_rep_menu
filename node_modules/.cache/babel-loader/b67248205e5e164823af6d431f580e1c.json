{"ast":null,"code":"var _jsxFileName = \"/Users/Buffalo/Desktop/menu/popdavise-v2/src/pages/auth/menus/items/menu-vista.jsx\";\n//Esta es la vista de la lista de menus\nimport React from 'react';\nimport { GetMethod } from '../../../../utils/peticiones';\nimport SpinerCharge from '../../../../components/spiners/spiner-charge';\nimport { WidthCaja } from '../../../../components/containers/containers';\nimport BartopList from '../../../../components/bartop/bartop-list';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport CardMenu from './card-menu';\n\nconst MenuVista = props => {\n  const ideUser = props.sesion.user.id_user;\n  const token = props.sesion.token;\n  const {\n    getMenus\n  } = props;\n  const [load, setLoad] = React.useState(true);\n  const [list, setList] = React.useState([]);\n  React.useEffect(() => {\n    const menusGet = async () => {\n      const result = await GetMethod(`api/users/menus/${ideUser}`, {\n        Authorization: 'Bearer ' + token\n      });\n\n      if (result.ok) {\n        setList(result.response.data.data.menus);\n        getMenus(result.response.data.data.menus);\n        setLoad(false);\n      } else {\n        setLoad(false);\n      }\n    };\n\n    menusGet();\n  }, [ideUser, token, getMenus]);\n\n  if (load) {\n    return /*#__PURE__*/React.createElement(SpinerCharge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }\n    });\n  } else {\n    //TO DO: condicionar si no hay \n    if (list.length === 0) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/dashboard/nuevomenu\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(WidthCaja, {\n      maxWidth: \"400px\",\n      flow: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BartopList, {\n      icon: \"fas fa-utensils\",\n      title: \"Men\\xFAs\",\n      ruta: \"/dashboard/nuevomenu\",\n      btntxt: \"crear\",\n      btnicon: \"fas fa-plus-circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }), props.menus.map((menu, i) => {\n      return /*#__PURE__*/React.createElement(CardMenu, {\n        key: i,\n        menu: menu,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 32\n        }\n      });\n    }));\n  }\n}; //REDUX---------------->\n\n\nconst mapStateToProps = state => {\n  return {\n    sesion: state.login,\n    menus: state.menuLista\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMenus: data => {\n      dispatch({\n        type: 'GET_MENUS',\n        data: data\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuVista); //export default MenuVista;","map":{"version":3,"sources":["/Users/Buffalo/Desktop/menu/popdavise-v2/src/pages/auth/menus/items/menu-vista.jsx"],"names":["React","GetMethod","SpinerCharge","WidthCaja","BartopList","connect","Redirect","CardMenu","MenuVista","props","ideUser","sesion","user","id_user","token","getMenus","load","setLoad","useState","list","setList","useEffect","menusGet","result","Authorization","ok","response","data","menus","length","map","menu","i","mapStateToProps","state","login","menuLista","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["//Esta es la vista de la lista de menus\nimport React from 'react';\nimport { GetMethod } from '../../../../utils/peticiones';\nimport SpinerCharge from '../../../../components/spiners/spiner-charge';\nimport { WidthCaja } from '../../../../components/containers/containers';\nimport BartopList from '../../../../components/bartop/bartop-list';\nimport {connect} from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport CardMenu from './card-menu';\n\n\nconst MenuVista = (props) => {\n\n    const ideUser = props.sesion.user.id_user\n    const token = props.sesion.token\n    const { getMenus } = props\n    const [load, setLoad] = React.useState(true)\n    const [list, setList] = React.useState([])\n    \n    React.useEffect(()=>{\n        const menusGet = async() =>{\n            const result = await GetMethod(`api/users/menus/${ideUser}`, {Authorization:'Bearer ' + token})\n            if(result.ok){\n                setList(result.response.data.data.menus)\n                getMenus(result.response.data.data.menus)\n                setLoad(false)\n            }else{\n                setLoad(false)\n            }\n        }\n        menusGet();\n    },[ideUser, token, getMenus])\n\n    if(load){\n\n        return <SpinerCharge/>\n\n    }else{\n        //TO DO: condicionar si no hay \n        if(list.length === 0){\n            return <Redirect to=\"/dashboard/nuevomenu\"/>\n        }\n        return (\n            <WidthCaja maxWidth=\"400px\" flow=\"column\">\n               \n                <BartopList icon=\"fas fa-utensils\"\n                            title=\"MenÃºs\"\n                            ruta=\"/dashboard/nuevomenu\"\n                            btntxt=\"crear\"\n                            btnicon=\"fas fa-plus-circle\"\n                            />\n                \n\n\n                {\n                    props.menus.map((menu, i) =>{\n                        return <CardMenu key={i} menu={menu}/>\n                    })\n                }\n                \n            </WidthCaja>\n            \n        );\n\n    }\n    \n};\n\n\n\n\n\n\n\n//REDUX---------------->\nconst mapStateToProps = (state) => {\n    return {\n        sesion: state.login,\n        menus: state.menuLista\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getMenus: (data) => {\n            dispatch({\n                type:'GET_MENUS', data:data\n            })\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuVista)\n//export default MenuVista;"]},"metadata":{},"sourceType":"module"}